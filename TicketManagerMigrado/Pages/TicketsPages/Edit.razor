@page "/EditarTicket"
@page "/EditarTicket/TicketId={ticketId:int}"

@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<PageTitle>Editar Ticket</PageTitle>
<EditForm Model="ticket" OnValidSubmit="Modificar" FormName="modificarTicket">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header">
				<h3><strong>Editar Ticket</strong></h3>
			</div>
			<div class="card-body">
				@*Ticket Id:*@
				<label>TicketId:</label>
				<div class="col-2">
					<InputNumber class="form-control" @bind-Value="ticket.TicketId"></InputNumber>
				</div>
				<div class="row">
					@*Fecha:*@
					<div class="col-2">
						<label>Fecha:</label>
						<InputDate @bind-Value="ticket.Fecha" class="form-control input-group-sm"></InputDate>
						<ValidationMessage For="@(() => ticket.Fecha)" />
					</div>
					@*SolicitadoPor:*@
					<div class="col-3">
						<label>Solicitado Por:</label>
						<InputSelect class="form-select" @bind-Value="ticket.SolicitadoPor">
							@foreach (var cliente in listaClientes)
							{
								<option value="@cliente.Nombres">@cliente.Nombres</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => ticket.SolicitadoPor)" />
					</div>
					@*SistemaId:*@
					<div class="col-3">
						<label>Sistema:</label>
						<InputSelect class="form-select" @bind-Value="ticket.SistemaId">
							@foreach (var sistema in listaSistemas)
							{
								<option value="@sistema.SistemaId">@sistema.Nombre</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => ticket.SistemaId)" />
					</div>
					@*PrioridadId:*@
					<div class="col-3">
						<label>Prioridad:</label>
						<InputSelect class="form-select" @bind-Value="ticket.PrioridadId">
							@foreach (var prioridad in listaPrioridades)
							{
								<option value="@prioridad.PrioridadId">@prioridad.Descripcion</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => ticket.PrioridadId)" />
					</div>
				</div>
				<div class="row">
					@*Asunto:*@
					<div class="col-3">
						<label>Asunto:</label>
						<InputText @bind-Value="ticket.Asunto" class="form-control input-group-sm" placeholder="Ingrese un título para el ticket."></InputText>
						<ValidationMessage For="@(() => ticket.Asunto)" />
					</div>
					@*Descripción:*@
					<div class="col-9">
						<label>Descripci&oacute;n:</label>
						<InputText @bind-Value="ticket.Descripcion" class="form-control input-group-sm" placeholder="Explique aquí el problema."></InputText>
						<ValidationMessage For="@(() => ticket.Descripcion)" />
					</div>
				</div>
			</div>
			<div class="card-footer d-flex justify-content-center">
				<button type="submit" class="btn btn-outline-primary"><i class="bi bi-floppy-fill" /> Modificar</button>
				<div class="col d-flex justify-content-end"><a href="/Tickets" class="btn btn-dark"> Volver</a></div>

			</div>
		</div>
	</div>
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header">
				<h3><strong>Detalles Ticket</strong></h3>
			</div>
			<div class="card-body">
				<div class="row">
					<div class="col-3">
						<label>Emisor</label>
						<InputText @bind-Value="DetalleEmisor" class="form-control" placeholder="Ej: Juan Perez"></InputText>
						<ValidationMessage For="@(() => DetalleEmisor)" />
					</div>
					<div class="col-5">
						<label>Mensaje</label>
						<InputTextArea @bind-Value="DetalleMensaje" class="form-control" placeholder="Digite un mensaje."></InputTextArea>
						<ValidationMessage For="@(() => DetalleMensaje)" />
					</div>
					<div class="col-3">
						<button type="button" @onclick="Agregar" class="btn btn-success">Add</button>
					</div>
				</div>
			</div>
			<table class="table table-bordered">
				<thead>
					<tr>
						<th>Emisor</th>
						<th>Mensaje</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var detalle in ticket.TicketsDetalle)
					{
						<tr>
							<td>@detalle.Emisor</td>
							<td>@detalle.Mensaje</td>
							<td><button type="button" class="btn btn-danger" @onclick=@(() => Remover(detalle))>Eliminar</button></td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		@Mensaje
	</div>
</EditForm>

@code {
	[Parameter]
	public int ticketId { get; set; }
	public Tickets ticket { get; set; } = new Tickets();
	public string Mensaje { get; set; } = string.Empty;
	public List<Prioridades> listaPrioridades = new List<Prioridades>();
	public List<Clientes> listaClientes = new List<Clientes>();
	public List<Sistemas> listaSistemas = new List<Sistemas>();
	public string DetalleEmisor { get; set; } = string.Empty;
	public string DetalleMensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		ticket = (await httpClient.GetFromJsonAsync<Tickets>($"api/Tickets/{ticketId}"))!;
		listaPrioridades = (await httpClient.GetFromJsonAsync<List<Prioridades>>("api/Prioridades"))!;
		listaClientes = (await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes"))!;
		listaSistemas = (await httpClient.GetFromJsonAsync<List<Sistemas>>("api/Sistemas"))!;
	}

	public async Task Modificar()
	{
		if (!await Validar())
		{
			var modificar = await httpClient.PutAsJsonAsync($"api/Tickets/{ticketId}", ticket);
			if (modificar.IsSuccessStatusCode)
			{
				StateHasChanged();
				VolverAtras();
			}
			else
				Mensaje = "No se pudo modificar el ticket.";
		}
	}

	public async Task<bool> Validar()
	{
		var listaSistemas = await httpClient.GetFromJsonAsync<List<Tickets>>("api/Tickets");
		var asunto = listaSistemas!.Where(t => t.Asunto == ticket.Asunto);

		if (asunto.Any())
		{
			Mensaje = "Ya existe un ticket con este asunto.";
			return true;
		}
		return false;
	}

	public async Task Agregar()
	{
		if (!string.IsNullOrEmpty(DetalleEmisor) && !string.IsNullOrEmpty(DetalleMensaje))
		{
			if (!ValidarDetalle())
			{
				var nuevoDetalle = new DetalleTickets { Emisor = DetalleEmisor, Mensaje = DetalleMensaje };
				ticket.TicketsDetalle.Add(nuevoDetalle);
			}
		}
		else
			Mensaje = "No deben haber campos vacíos en el detalle.";
		StateHasChanged();
	}

	public void Remover(DetalleTickets detalle)
	{
		ticket.TicketsDetalle.Remove(detalle);
	}

	public bool ValidarDetalle()
	{
		foreach (var detalle in ticket.TicketsDetalle)
		{
			if (detalle.Mensaje == DetalleMensaje)
			{
				Mensaje = "Ya existe un detalle con este mensaje.";
				return true;
			}
		}
		return false;
	}

	void VolverAtras()
	{
		NavigationManager.NavigateTo("/Ticketes");
	}
}