@page "/EliminarTicket"
@page "/EliminarTicket/TicketId={ticketId:int}"

@inject HttpClient httpClient
@inject NavigationManager NavigationManager;

<PageTitle>Eliminar Ticket</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		<div class="card-header">
			<h3><strong>Eliminar Ticket</strong></h3>
		</div>
		<div class="card-body">
			<h4><strong>¿Seguro quieres eliminar este ticket?</strong></h4>
			<div>
				<p class="mb-2"><strong>Ticket Id:</strong> @ticket.TicketId</p>
			</div>
			<div>
				<p class="mb-2"><strong>Fecha:</strong> @ticket.Fecha.ToShortDateString()</p>
			</div>
			<div>
				<p class="mb-2"><strong>Cliente Id:</strong> @ticket.ClienteId</p>
			</div>
			<div>
				<p class="mb-2"><strong>Sistema Id:</strong> @ticket.SistemaId</p>
			</div>
			<div>
				<p class="mb-2"><strong>Prioridad Id:</strong> @ticket.PrioridadId</p>
			</div>
			<div>
				<p class="mb-2"><strong>Asunto:</strong> @ticket.Asunto</p>
			</div>
			<div>
				<p class="mb-2"><strong>Descripci&oacute;n:</strong> @ticket.Descripcion</p>
			</div>
			<button type="button" class="btn btn-danger" @onclick="Eliminar"><i class="bi bi-trash3"></i> Eliminar</button>
			<button type="button" class="btn btn-dark" @onclick="VolverAtras"><i class="bi bi-x-octagon"></i> Cancelar</button>
		</div>
		@Mensaje
	</div>
</div>

@code {
	[Parameter]
	public int ticketId { get; set; }
	public Tickets ticket { get; set; } = new Tickets();
	public string Mensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		ticket = (await httpClient.GetFromJsonAsync<Tickets>($"api/Tickets/{ticketId}"))!;
	}

	public async Task Eliminar()
	{
		var eliminado = await httpClient.DeleteAsync($"api/Tickets/{ticket.TicketId}");
		if (eliminado.IsSuccessStatusCode)
		{
			VolverAtras();
		}
		else
		{
			Mensaje = "No se podido eliminar el ticket.";
		}
	}

	void VolverAtras()
	{
		NavigationManager.NavigateTo("/Tickets");
	}
}