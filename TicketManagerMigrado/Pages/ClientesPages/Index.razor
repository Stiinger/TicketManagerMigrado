@page "/Clientes"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<PageTitle>Clientes</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header">
            <h3><strong>Clientes</strong></h3>
            <div class="row">
                <div class="col-2">
                    <a href="/CrearCliente" class="btn btn-success bi bi-file-earmark-diff-fill"> Crear</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <label>Filtrar por:</label>
                <div class="col-2">
                    <InputSelect class="form-select" @bind-Value="OpcionFiltro">
                        <option disabled selected value="0">Seleccionar</option>
                        <option value="1">Cliente Id</option>
                        <option value="2">Nombre</option>
                        <option value="3">RNC</option>
                    </InputSelect>
                </div>
                <div class="col-auto">
                    @switch (OpcionFiltro)
                    {
                        case 1:
                            <div class="input-group row">
                                <InputNumber class="form-control" @bind-Value="cliente.ClienteId"></InputNumber>
                                <div class="col-3">
                                    <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Filtrar">Buscar</button>
                                </div>
                                <div class="col-1">
                                    <button type="button" class="btn btn-outline-secondary bi bi-arrow-clockwise" @onclick="ReiniciarFiltro">Reiniciar</button>
                                </div>
                            </div>
                            break;
                        case 2:
                            <div class="input-group row">
                                <InputText class="form-control" @bind-Value="cliente.Nombres"></InputText>
                                <div class="col-3">
                                    <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Filtrar">Buscar</button>
                                </div>
                                <div class="col-1">
                                    <button type="button" class="btn btn-outline-secondary bi bi-arrow-clockwise" @onclick="ReiniciarFiltro">Reiniciar</button>
                                </div>
                            </div>
                            break;
                        case 3:
                            <div class="input-group row">
                                <InputText class="form-control" @bind-Value="cliente.RNC"></InputText>
                                <div class="col-3">
                                    <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Filtrar">Buscar</button>
                                </div>
                                <div class="col-1">
                                    <button type="button" class="btn btn-outline-secondary bi bi-arrow-clockwise" @onclick="ReiniciarFiltro">Reiniciar</button>
                                </div>
                            </div>
                            break;
                    }
                </div>
                @if (listaClientes.Count() == 0)
                {
                    <div class="card">
                        <div class="card-body">
                            <h3 class="card-title">No hay clientes para mostrar.</h3>
                        </div>
                    </div>
                }
                else
                {
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Cliente Id</th>
                                <th>Nombres</th>
                                <th>RNC</th>
                                <th>Tel&eacute;fono</th>
                                <th>Celular</th>
                                <th>Direcci&oacute;n</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var cliente in listaClientes)
                            {
                                <tr>
                                    <td>@cliente.ClienteId</td>
                                    <td>@cliente.Nombres</td>
                                    <td>@cliente.RNC</td>
                                    <td>@cliente.Telefono</td>
                                    <td>@cliente.Celular</td>
                                    <td>@cliente.Direccion</td>
                                    <td><button type="button" class="btn btn-info" @onclick="(e) => IrDetalle(cliente.ClienteId)"><i class="bi bi-eye"></i> Detalles</button></td>
                                    <td><button type="button" class="btn btn-warning" @onclick="(e) => IrEditar(cliente.ClienteId)"><i class="bi bi-pencil-square"></i> Editar</button></td>
                                    <td><button type="button" class="btn btn-danger" @onclick="(e) => IrEliminar(cliente.ClienteId)"><i class="bi bi-trash3-fill"></i> Eliminar</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
            <div class="card-footer">
                <div class="row">
                    <div class="col">
                        <p class="float-start"><strong>Total de Clientes:</strong> @listaClientes.Count</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Clientes> listaClientes = new List<Clientes>();
    private int OpcionFiltro { get; set; } = 0;
    private Clientes cliente { get; set; } = new Clientes();

    protected override async Task OnInitializedAsync()
    {
        listaClientes = (await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes"))!;
    }

    public void IrEditar(int clienteId)
    {
        NavigationManager.NavigateTo($"/EditarCliente/ClienteId={clienteId}");
    }

    public void IrEliminar(int clienteId)
    {
        NavigationManager.NavigateTo($"/EliminarCliente/ClienteId={clienteId}");
    }

    public void IrDetalle(int clienteId)
    {
        NavigationManager.NavigateTo($"DetallesClientes/ClienteId={clienteId}");
    }

    public async Task Filtrar()
    {
        switch (OpcionFiltro)
        {
            case 1:
                listaClientes = (await httpClient.GetFromJsonAsync<List<Clientes>>($"api/Clientes/"))!.Where(c => c.ClienteId == cliente.ClienteId).ToList();
                break;
            case 2:
                listaClientes = (await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes"))!.Where(c => c.Nombres!.ToLower().Contains(cliente.Nombres!.ToLower())).ToList();
                break;
            case 3:
                listaClientes = (await httpClient.GetFromJsonAsync<List<Clientes>>($"api/Clientes/"))!.Where(c => c.RNC == cliente.RNC).ToList();
                break;
        }
    }

    public async Task ReiniciarFiltro()
    {
        listaClientes = (await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes"))!;
    }
}